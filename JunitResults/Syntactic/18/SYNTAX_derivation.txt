[SYNTAX] prog 
[SYNTAX] classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] ClassDecl classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class id classDecl_Optional { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility classDecl_Optional { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { type id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { numericType id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; ClassDecl classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class id classDecl_Optional { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility classDecl_Optional { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : id classDecl_Listtow { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility classDecl_Listtow { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { varDecl_FuncDecl_List } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { type id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { numericType id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { int id varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { int var1 varDecl_FunctDef_Tail } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { int var1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1 arraySizeList ;   } ; class Utility : InheritedUtility  { int var1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ INTEGER ] List ;   } ; class Utility : InheritedUtility  { int var1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1 arraySizeList ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ INTEGER ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; varDecl_FuncDecl_List  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; type id varDecl_FunctDef_Tail  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; numericType id varDecl_FunctDef_Tail  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float id varDecl_FunctDef_Tail  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 varDecl_FunctDef_Tail  } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; type id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; numericType id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax funcHead_Optional ( fParams ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( fParams ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( type id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( numericType id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( int id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( int array arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2 arraySizeList ; int findMax  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ INTEGER ] List ; int findMax  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize  fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) type id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) numericType id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int id varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin varDecl_FunctDef_Tail   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin funcHead_Optional ( fParams ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( fParams ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( type id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( numericType id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( int id arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( int array arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array arraySize   ) int findMin  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ INTEGER ]    ) int findMin  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize arraySize_List fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize  fParamsTail_List ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   ) varDecl_FuncDecl_List   } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ; classDecl_List funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  funcDef funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  funcHead funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  type id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  numericType id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr id ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( type id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( numericType id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( int id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( int array arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array arraySize   )    } ;  int Utility sr findMax ( int array arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ INTEGER ]    )    } ;  int Utility sr findMax ( int array arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize  fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { numericType id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; numericType id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int idx arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int idx  ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int idx  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id indiceIdnestList_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp arithExpr exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; id  assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]   term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]    arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]     exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; remainingStatement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; for ( numericType id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , id [ 100   ]      ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp arithExpr exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp term arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp factor term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp intNum term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99 term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99  arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99   exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; term arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; factor term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; functionCall term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; , variable term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idx [ 100   ]      ; for ( int id assignOp 99    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id indice_List idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id  idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id   term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id    arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > term arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > factor term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > intNum term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0 term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0  arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; variable assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id indice_List idnest_List_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id  idnest_List_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp arithExpr exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id   term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    addOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - intNum term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1 term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1  arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1   exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { statement statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { remainingStatement statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( expr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( arithExpr exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( term arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( factor term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( functionCall term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , variable term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , idxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int id assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]   term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]    arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     relOp arithExpr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > arithExpr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > functionCall term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , variable term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int idx assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id  idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id   term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id    arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { statement statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { assignStatSemicolon statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { variable assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , id     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id variable_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id variable_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id indice_List idnest_List_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id  idnest_List_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp arithExpr exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp term arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; id   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , id    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]   term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]    arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]     exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  { statement_List } ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; remainingStatement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( expr ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( arithExpr exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( term arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( factor term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( functionCall term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , variable term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , idx    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id   term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id    arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id     exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcDef funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcHead funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; type id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; numericType id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , id [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , id     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( type id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( numericType id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array arraySize   ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ INTEGER ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize arraySize_List fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize  fParamsTail_List ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { numericType id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; numericType id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , idx [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , idx [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , idx [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id indiceIdnestList_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp arithExpr exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]   term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]    arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]     exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; remainingStatement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( numericType id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp arithExpr exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp term arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp factor term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp intNum term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1 term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1  arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1   exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; relExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; term arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; factor term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; functionCall term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , variable term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id indice_List idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id  idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id   term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id    arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     relOp arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= arithExpr ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= term arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= factor term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= intNum term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99 term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99  arithExpr_Tail ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; assignStat ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; variable assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id indice_List idnest_List_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id  idnest_List_Tail assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp expr ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp arithExpr exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( arithExpr ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( functionCall term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , variable term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id  idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id   term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id    arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     ) term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  addOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + intNum term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1 term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1  arithExpr_Tail exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1   exp_Tail ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    ) statBlock ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { statement statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { remainingStatement statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( expr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( arithExpr exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( term arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( factor term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( functionCall term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , variable term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , idxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int id sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]   term_Tail arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]    arithExpr_Tail exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     exp_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     relOp arithExpr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < arithExpr ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < functionCall term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , variable term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int idx sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id  idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id   term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    addOp term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + intNum term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 multOp factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / intNum term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8 term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  addOp term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or term arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or factor term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or functionCall term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , variable term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr id ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id variable_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id  idnest_List_Tail term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id   term_Tail arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id    arithExpr_Tail ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then statBlock else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { statement statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { assignStatSemicolon statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { variable assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr idx ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id variable_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id variable_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id indice_List idnest_List_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id  idnest_List_Tail assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp expr ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp arithExpr exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp term arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int id arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int id  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]   term_Tail arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]    arithExpr_Tail exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]     exp_Tail ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ; statement_List } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else statBlock ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  { statement_List } ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ; statement_List } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; remainingStatement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( expr ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( arithExpr exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( term arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( factor term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( functionCall term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , variable term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int idx  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id   term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id    arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id     exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcDef funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; funcHead funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; type id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; numericType id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int id  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id funcHead_Optional ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  ( fParams ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) funcBody ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { numericType id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; id  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id arraySize_List ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; varDecl_statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , id [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id varDeclStatement_Tail } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id indiceIdnestList_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp arithExpr exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp intNum term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 multOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( arithExpr ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( intNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  addOp term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + floatNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 multOp factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / floatNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006  arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )  arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )   exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; assignStatSemicolon statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; variable assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int id assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id variable_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id variable_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id  idnest_List_Tail assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp expr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp arithExpr exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp floatNum term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05 term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  addOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( arithExpr ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( arithExpr ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( term arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( floatNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 multOp factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * floatNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47  arithExpr_Tail ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   ) term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  addOp term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - floatNum term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0 term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0  arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  addOp term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + term arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + floatNum term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006 term_Tail arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006  arithExpr_Tail exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   exp_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   relOp arithExpr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > arithExpr ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > term arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > intNum term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 multOp factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  assignOp , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign factor term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign intNum term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1 term_Tail arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1  arithExpr_Tail ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; statement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; remainingStatement statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( expr ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( arithExpr exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( term arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( factor term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( functionCall term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , variable term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , id     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id   term_Tail arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id    arithExpr_Tail exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id     exp_Tail ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ; statement_List } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ; funcDef_List 'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' funcBody ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { numericType id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; id   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array arraySize   ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ INTEGER ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; numericType id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , id     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , idx     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , idx     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , idx     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; numericType id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , idx     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; numericType id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , id [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , id     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id varDeclStatement_Tail } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id varDeclStatement_Tail } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , id    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , id     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; id varDeclStatement_Tail } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; id varDeclStatement_Tail } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { id   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; id id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; id id arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id arraySize  ; int id  ; int id  ; int id  ; id id  ; id id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ INTEGER ]   ; int id  ; int id  ; int id  ; id id  ; id id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id arraySize arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ INTEGER ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]  arraySize arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ INTEGER ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]  arraySize arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ INTEGER ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize arraySize_List ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; varDecl_statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; remainingStatement statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( numericType id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , id [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp arithExpr exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp term arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp factor term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp intNum term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0 term_Tail arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0  arithExpr_Tail exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0   exp_Tail ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; relExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; term arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; factor term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; functionCall term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , variable term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , id     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id variable_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id indice_List idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id  idnest_List_Tail term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id   term_Tail arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id    arithExpr_Tail relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     relOp arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= arithExpr ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= term arithExpr_Tail ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= factor term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= intNum term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100 term_Tail arithExpr_Tail ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100  arithExpr_Tail ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; assignStat ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; variable assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , id      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id variable_Tail assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id indice_List idnest_List_Tail assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id  idnest_List_Tail assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp expr ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp arithExpr exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float id  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id   term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    addOp term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + term arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + factor term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + intNum term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1 term_Tail arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1  arithExpr_Tail exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1   exp_Tail ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    ) statBlock ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { statement statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { remainingStatement statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( variable ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float id  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id variable_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id variable_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id indice indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ arithExpr ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ term arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; id  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ] indice_List idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]  idnest_List_Tail ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; statement statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; assignStatSemicolon statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; variable assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; id   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id variable_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id variable_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id indice indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , id      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ] indice_List idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]  idnest_List_Tail assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp expr ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp arithExpr exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp term arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( arithExpr ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( term arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( functionCall term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , variable term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int id  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int id  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]  idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   multOp factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * factor term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * functionCall term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , variable term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int id  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id variable_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id ( aParams ) idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  ) idnest_List_Tail term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )  term_Tail arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )   arithExpr_Tail ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    ) term_Tail arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )  arithExpr_Tail exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )   exp_Tail ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ; statement_List } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; statement statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; assignStatSemicolon statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; variable assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int id  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id  idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp arithExpr exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp term arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; id id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  idnest_ idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility id  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( aParams ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( expr aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( arithExpr exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( term arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( factor term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( functionCall term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , variable term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; id id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id   term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id    arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id     exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id      aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )  term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )   arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )    exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; statement statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; assignStatSemicolon statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; variable assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample id  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id  idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp arithExpr exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp term arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp functionCall term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , variable term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int id assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id variable_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  idnest_ idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , id     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( aParams ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( expr aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( arithExpr exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( term arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( factor term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( functionCall term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , variable term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; id   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id variable_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id indice_List idnest_List_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id  idnest_List_Tail term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id   term_Tail arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id    arithExpr_Tail exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id     exp_Tail aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id      aParamsTail_List ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       ) idnest_List_Tail term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )  term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )   arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )    exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; statement statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; assignStatSemicolon statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; variable assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , id    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  idnest_ idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( id [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id idnest_Tail idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id idnest_Tail idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]  idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp arithExpr exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp term arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp factor term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp intNum term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10 term_Tail arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10  arithExpr_Tail exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10   exp_Tail ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; statement statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; assignStatSemicolon statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; variable assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , id     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id variable_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; id [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  idnest_ idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , id     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id idnest_Tail idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6  arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] indice indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ arithExpr ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , id [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    addOp term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + term arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + functionCall term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , variable term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , idx [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id variable_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id    arithExpr_Tail ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ] indice_List idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]  idnest_List_Tail term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]   term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]    arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] indice indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ arithExpr ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ term arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ factor term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ intNum term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1 term_Tail arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1  arithExpr_Tail ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1   ] indice_List idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1   ]  idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1   ]  idnest_ idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , id     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1   ]  . id idnest_Tail idnest_List_Tail assignOp expr ; statement_List } ';' 
[SYNTAX] class InheritedUtility  { int member1  [ 4 ] List ;   } ; class Utility : InheritedUtility  { int var1  [ 5 ] List ; float var2  [ 100 ] List ; int findMax  ( int array  [ 100 ]    ) int findMin  ( int array  [ 100 ]    )    } ;  int Utility sr findMax ( int array  [ 100 ]    ) { int maxValue  ; int maxValuex  ; array  as-Op , arrayxxxx [ 100   ]      ; for ( int maxValuex assignOp 99    ; , maxValue     > 0   ; array   assignOp , maxValuex    - 1    )  { if ( , Utility [ , findMin     ]     > , array     ) then  { minValue   assignOp , minValuex [ , array     ]      ;  } else  {  } ;  } ; return ( , arrayxxxx      ) ;  } ; int maxValuex sr maxValuex ( int array  [ 100 ]    ) { int minValuex  ; int randomize  ; value  assignOp , value [ 100   ]      ; for ( int value assignOp 1    ; , value     <= 99   ; sample   assignOp ( , maxValuex     )  + 1    )  { if ( , minValue [ , Utility     ]     < , utility    + 1 / 8  or , Utility     ) then  { arrayUtility   assignOp , t [ , t     ]      ;  } else  {  } ;  } ; return ( , t      ) ;  } ; float t  (  ) { float sample  ; t  assignOp 100 * ( 2  + 3.0 / 7.0006   )    ; sample   assignOp 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   > 1 and not sign 1   ; return ( , t      ) ;  } ;  'program' { int sample  [ 2 ]   ; int t  ; int randomize  ; int maxValue  ; utility findMax  ; sample minValue  [ 3 ]   [ 6 ]   [ 7 ]  arraySize  ; for ( int utility assignOp 0    ; , findMin     <= 100   ; sample   assignOp , utility    + 1    )  { get ( var1 [ , arrayUtility     ]   ) ; utility [ , var1     ]   assignOp ( , maxValuex [ , var2     ]   * , id (  )    )    ;  } ; id   assignOp , id  . id ( , id       )     ; id   assignOp , id  . id ( , id       )     ; id  . id [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   assignOp 10    ; id [ , id  . id [ 1   ] [ 2   ] [ 3   ] [ 4   ] [ 5   ] [ 6   ] [ , id    + , id     ]     ] [ 1   ] [ 1   ] [ 1   ]  . id idnest_Tail idnest_List_Tail assignOp expr ; statement_List } ';' 
