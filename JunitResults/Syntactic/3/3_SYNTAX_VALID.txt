class Foo1 {};
class Foo2 {
	unknowVarType i;
	int a;
	flat c;
	float d;
	Foo1 foo[1][2][3][4];
};
class Foo3 {
	unknownFuncType func(){
	};
	float func(float a) {
	};
	int func(float a, Foo b[3]) {
		int i[2][4];
	};
};
class Foo4 {
	int array[4];
	float realNum;

	float foo2(Unknown a, float b[3]) {
		Foo1 f;
		Foo2 f[11][2][3][4][5][6][7][8];
		
		f = 9.0;
		a = b + c;
		b = c * d / e;
		c = d + not e and f;
		d.a = d[1] <= g;
		
		// complex expression
		if (isTrue(p, q)) then { 
			d.b = (-d[2]) <> g;
			e[1].d.c = e.param(a.c, b[2]);
		} else {
			e[-(9 + f(a, b, c))] = not a or 8 * h[1].i[2].j();
			f[1].f[a and (b * c / not d)] = -6.66 + a[1 * (b[2][3].c(d))].b(p, q);
		};
		
		return(1);
	};
};
program { 
	float a[1][2][3];
	
	for (int i = 0 ; i == 10; i = i + 1 ) {
		if (c * d) then {
			get(a.b[1]);
		} else {
			put(a <> b.c.d);
		};
	};		
};
int nullFunc(){
};
Foo retFoo(){
	Foo foo;
	
	// if else then without statement blocks
	if(a>b) then else;
	
	
	// for without statement blocks
	for(int i = 0; i <= j; i = i + 1);
	
	// if else then  with statement blocks - no statement
	if(a>b) 
	then{
		// no statement
	} else {
		// no statement
	};
	
	// for with statement blocks - no statement
	for(int i = 0; i <= j; i = i + 1){
		// no statement
	};
	
	// if else with a statement
	if(a.b.c() >= (a*b))
	then
		e[-(9 + f(a, b, c))] = not a or 8 * h[1].i[2].j();
	else
		f[1].f[a and (b * c / not d)] = -6.66 + a[1 * (b[2][3].c(d))].b(p, q);
	;
	
	// for with a statement
	for(int i = 0; i <= j; i = i + 1)
		f[1].f[a and (b * c / not d)] = -6.66 + a[1 * (b[2][3].c(d))].b(p, q);
	; // end of for
	
	// if else then with statement blocks
	if(a.b.c() >= (a*b))
	then{
		a = a*b;
		get(a[a*b+c-d/e]);
		put(a[a*b+c-d/e]);
		a = 10.01;
		return(foo);
	} else{
		a = a*b;
		get(a[a*b+c-d/e]);
		put(a[a*b+c-d/e]);
		a = 10.01;
		return(foo);
	};
	
	// for with a statement blocks with statement
	for(int i = 0; i <= j; i = i + 1){
		f[1].f[a and (b * c / not d)] = -6.66 + a[1 * (b[2][3].c(d))].b(p, q);
		foo[1][2][3][4] = foo[a*b+c-d/e][a+b];
		foo[a].foo.c.a[a+B*C-c/D].abcd_abcd = foo[a*b+c-d/e][a+b];
	}; // end of for
	
	
	// nested for and ifs
	for(int i = 0; i <= j; i = i + 1){
		for(int i = 0; i <= j; i = i + 1){
			for(int i = 0; i <= j; i = i + 1){
				a = a[1][2][3].c[1][2][3][4][5][6][7][8][9][10];
				a[a+b-d*d] = - (+ ( not (a5 + a1 - a2 or a3 and a4[ab] ) ) );
			};
				if(a.b.c() >= (a*b))
				then{
					a = a*b;
				} else{
					a = 5 * 5;
					for(int i = 0; i <= j; i = i + 1);
					for(int i = 0; i <= j; i = i + 1){
						if(a>b) then else;
					};
				};
		};
	};
	
	// complex expression
	a[a+b-d*d] = - (+ ( not (a5 + a1 - a2 or a3 and a4[ab] ) ) );
	
	// nested if else's
	if(a<b) then {
		if(a<=b) then {
			if(a<>b) then {
				if(a==b) then {
					if(a>b) then {
						if(a>=b) then {
								a = 10 + 10.1 + 11 ;
						}else;
					}else;
				}else;
			}else;
		}else;
	}else; 
	
	get(a[a*b+c-d/e]);
	put(a[a*b+c-d/e]);
	a = 10.01;
	return(foo);
	
	
	// class arrays and object arrays and index as expressions
	
	foo[1][2][3][4] = foo[a*b+c-d/e][a+b];
	foo[a].foo.c.a[a+B*C-c/D].abcd_abcd = foo[a*b+c-d/e][a+b];
};

